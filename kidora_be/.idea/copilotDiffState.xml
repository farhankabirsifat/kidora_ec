<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/__init__.py" />
              <option name="updatedContent" value="# This is the main entry point for the FastAPI app&#10;from .main import app&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/config.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/config.py" />
              <option name="originalContent" value="import os&#10;from functools import lru_cache&#10;&#10;# Note: Removed python-dotenv optional import to avoid errors when the package&#10;# is not installed. Ensure environment variables are set in your environment.&#10;&#10;&#10;class Settings:&#10;    SECRET_KEY: str = os.getenv(&quot;SECRET_KEY&quot;, &quot;change_me_secret&quot;)&#10;    ALGORITHM: str = os.getenv(&quot;ALGORITHM&quot;, &quot;HS256&quot;)&#10;    ACCESS_TOKEN_EXPIRE_MINUTES: int = int(os.getenv(&quot;ACCESS_TOKEN_EXPIRE_MINUTES&quot;, &quot;60&quot;))&#10;    DATABASE_URL: str = os.getenv(&quot;DATABASE_URL&quot;, &quot;postgresql+psycopg://postgres:1234@localhost:5432/kidora&quot;)&#10;    ADMIN_EMAIL: str = os.getenv(&quot;ADMIN_EMAIL&quot;, &quot;admin@example.com&quot;)&#10;    ADMIN_EMAIL_PASSWORD: str = os.getenv(&quot;ADMIN_EMAIL_PASSWORD&quot;, &quot;&quot;)&#10;    SMTP_SERVER: str = os.getenv(&quot;SMTP_SERVER&quot;, &quot;smtp.gmail.com&quot;)&#10;    SMTP_PORT: int = int(os.getenv(&quot;SMTP_PORT&quot;, &quot;587&quot;))&#10;    EMAIL_BACKEND: str = os.getenv(&quot;EMAIL_BACKEND&quot;, &quot;console&quot;).lower()&#10;&#10;&#10;@lru_cache&#10;def get_settings():&#10;    return Settings()&#10;" />
              <option name="updatedContent" value="import os&#10;from functools import lru_cache&#10;&#10;# Prefer loading environment variables from a .env file if python-dotenv is available&#10;try:&#10;    from dotenv import load_dotenv, find_dotenv&#10;    _env_path = find_dotenv(usecwd=True)&#10;    if _env_path:&#10;        load_dotenv(_env_path, override=True)&#10;except Exception:&#10;    # If python-dotenv is not installed, skip silently&#10;    pass&#10;&#10;&#10;class Settings:&#10;    SECRET_KEY: str = os.getenv(&quot;SECRET_KEY&quot;, &quot;change_me_secret&quot;)&#10;    ALGORITHM: str = os.getenv(&quot;ALGORITHM&quot;, &quot;HS256&quot;)&#10;    ACCESS_TOKEN_EXPIRE_MINUTES: int = int(os.getenv(&quot;ACCESS_TOKEN_EXPIRE_MINUTES&quot;, &quot;60&quot;))&#10;    DATABASE_URL: str = os.getenv(&quot;DATABASE_URL&quot;, &quot;postgresql+psycopg://postgres:1234@localhost:5432/kidora&quot;)&#10;    ADMIN_EMAIL: str = os.getenv(&quot;ADMIN_EMAIL&quot;, &quot;admin@example.com&quot;)&#10;    ADMIN_EMAIL_PASSWORD: str = os.getenv(&quot;ADMIN_EMAIL_PASSWORD&quot;, &quot;&quot;)&#10;    SMTP_SERVER: str = os.getenv(&quot;SMTP_SERVER&quot;, &quot;smtp.gmail.com&quot;)&#10;    SMTP_PORT: int = int(os.getenv(&quot;SMTP_PORT&quot;, &quot;587&quot;))&#10;    EMAIL_BACKEND: str = os.getenv(&quot;EMAIL_BACKEND&quot;, &quot;console&quot;).lower()&#10;&#10;&#10;@lru_cache&#10;def get_settings():&#10;    return Settings()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/models/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/models/__init__.py" />
              <option name="updatedContent" value="# Models package&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/routers/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/routers/__init__.py" />
              <option name="updatedContent" value="# Routers package&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/schemas/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/schemas/__init__.py" />
              <option name="updatedContent" value="# Schemas package&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/utils/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/utils/__init__.py" />
              <option name="updatedContent" value="# Utils package&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/utils/storage.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/utils/storage.py" />
              <option name="originalContent" value="from pathlib import Path&#10;import os&#10;import uuid&#10;import shutil&#10;from typing import List&#10;from fastapi import UploadFile&#10;&#10;def save_upload_file(upload_file: UploadFile, subdir: str = &quot;products&quot;) -&gt; str:&#10;    &quot;&quot;&quot;Save a single UploadFile to media/subdir and return its URL path (/media/subdir/filename).&quot;&quot;&quot;&#10;    if not upload_file or not upload_file.filename:&#10;        raise ValueError(&quot;No file provided&quot;)&#10;    ext = os.path.splitext(upload_file.filename)[1].lower()&#10;    filename = f&quot;{uuid.uuid4().hex}{ext}&quot;&#10;    dst_dir = MEDIA_ROOT / subdir&#10;    _ensure_dir(dst_dir)&#10;    file_path = dst_dir / filename&#10;    with file_path.open(&quot;wb&quot;) as buffer:&#10;        shutil.copyfileobj(upload_file.file, buffer)&#10;    return f&quot;/media/{subdir}/{filename}&quot;&#10;&#10;def save_multiple_upload_files(files: List[UploadFile], subdir: str = &quot;products&quot;) -&gt; List[str]:&#10;    &quot;&quot;&quot;Save multiple UploadFiles and return a list of URL paths.&quot;&quot;&quot;&#10;    urls: List[str] = []&#10;    for f in files or []:&#10;        if f and f.filename:&#10;            urls.append(save_upload_file(f, subdir=subdir))&#10;    return urls&#10;&#10;" />
              <option name="updatedContent" value="from pathlib import Path&#10;import os&#10;import uuid&#10;import shutil&#10;from typing import List, Optional&#10;from fastapi import UploadFile&#10;from urllib.parse import urlparse&#10;from urllib.request import urlopen&#10;&#10;BASE_DIR = Path(__file__).resolve().parents[2]&#10;MEDIA_ROOT = BASE_DIR / &quot;media&quot;&#10;&#10;def _ensure_dir(path: Path) -&gt; None:&#10;    path.mkdir(parents=True, exist_ok=True)&#10;&#10;def save_upload_file(upload_file: UploadFile, subdir: str = &quot;products&quot;) -&gt; str:&#10;    &quot;&quot;&quot;Save a single UploadFile to media/subdir and return its URL path (/media/subdir/filename).&quot;&quot;&quot;&#10;    if not upload_file or not upload_file.filename:&#10;        raise ValueError(&quot;No file provided&quot;)&#10;    ext = os.path.splitext(upload_file.filename)[1].lower()&#10;    filename = f&quot;{uuid.uuid4().hex}{ext}&quot;&#10;    dst_dir = MEDIA_ROOT / subdir&#10;    _ensure_dir(dst_dir)&#10;    file_path = dst_dir / filename&#10;    with file_path.open(&quot;wb&quot;) as buffer:&#10;        shutil.copyfileobj(upload_file.file, buffer)&#10;    return f&quot;/media/{subdir}/{filename}&quot;&#10;&#10;def save_multiple_upload_files(files: List[UploadFile], subdir: str = &quot;products&quot;) -&gt; List[str]:&#10;    &quot;&quot;&quot;Save multiple UploadFiles and return a list of URL paths.&quot;&quot;&quot;&#10;    urls: List[str] = []&#10;    for f in files or []:&#10;        if f and f.filename:&#10;            urls.append(save_upload_file(f, subdir=subdir))&#10;    return urls&#10;&#10;# New: save from local path or URL&#10;&#10;def _pick_ext_from_content_type(ct: Optional[str]) -&gt; str:&#10;    mapping = {&#10;        &quot;image/jpeg&quot;: &quot;.jpg&quot;,&#10;        &quot;image/png&quot;: &quot;.png&quot;,&#10;        &quot;image/gif&quot;: &quot;.gif&quot;,&#10;        &quot;image/webp&quot;: &quot;.webp&quot;,&#10;        &quot;image/bmp&quot;: &quot;.bmp&quot;,&#10;    }&#10;    return mapping.get((ct or &quot;&quot;).split(&quot;;&quot;)[0].strip(), &quot;.bin&quot;)&#10;&#10;def save_from_path_or_url(src: str, subdir: str = &quot;products&quot;) -&gt; str:&#10;    &quot;&quot;&quot;Copy a file from a local path or download from HTTP(S)/file URL, save under media/subdir, return /media URL.&quot;&quot;&quot;&#10;    if not src:&#10;        raise ValueError(&quot;Empty source&quot;)&#10;&#10;    parsed = urlparse(src)&#10;    dst_dir = MEDIA_ROOT / subdir&#10;    _ensure_dir(dst_dir)&#10;&#10;    # Determine extension&#10;    ext = os.path.splitext(parsed.path if parsed.path else src)[1]&#10;&#10;    filename = f&quot;{uuid.uuid4().hex}{ext or ''}&quot;&#10;    file_path = dst_dir / filename&#10;&#10;    if parsed.scheme in (&quot;http&quot;, &quot;https&quot;):&#10;        with urlopen(src) as resp, file_path.open(&quot;wb&quot;) as out:&#10;            data = resp.read()&#10;            out.write(data)&#10;        # If no extension, try to use content-type header&#10;        if not ext:&#10;            ct = resp.headers.get(&quot;Content-Type&quot;) if 'resp' in locals() else None&#10;            if ct:&#10;                new_path = file_path.with_suffix(_pick_ext_from_content_type(ct))&#10;                file_path.rename(new_path)&#10;                file_path = new_path&#10;    elif parsed.scheme == &quot;file&quot;:&#10;        local_path = Path(parsed.path)&#10;        shutil.copyfile(local_path, file_path)&#10;    else:&#10;        # Treat as local filesystem path (Windows paths supported)&#10;        local_path = Path(src)&#10;        if not local_path.exists():&#10;            raise FileNotFoundError(f&quot;Source not found: {src}&quot;)&#10;        shutil.copyfile(local_path, file_path)&#10;&#10;    rel_url = f&quot;/media/{subdir}/{file_path.name}&quot;&#10;    return rel_url&#10;&#10;&#10;def save_multiple_from_paths_or_urls(sources: List[str], subdir: str = &quot;products&quot;) -&gt; List[str]:&#10;    return [save_from_path_or_url(s, subdir=subdir) for s in (sources or []) if s]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test_main.http">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test_main.http" />
              <option name="originalContent" value="# Test your FastAPI endpoints&#10;&#10;GET http://127.0.0.1:8000/&#10;Accept: application/json&#10;&#10;###&#10;&#10;GET http://127.0.0.1:8000/hello/User&#10;Accept: application/json&#10;&#10;###&#10;&#10;# Auth flow&#10;&#10;### Register&#10;POST http://127.0.0.1:8000/api/auth/register&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;firstName&quot;: &quot;Admin&quot;,&#10;  &quot;lastName&quot;: &quot;User&quot;,&#10;  &quot;email&quot;: &quot;admin@example.com&quot;,&#10;  &quot;phone&quot;: &quot;0123456789&quot;,&#10;  &quot;password&quot;: &quot;secret&quot;&#10;}&#10;&#10;### Send OTP (check your email for the code)&#10;POST http://127.0.0.1:8000/api/auth/send-otp&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;email&quot;: &quot;admin@example.com&quot;&#10;}&#10;&#10;### Verify OTP -&gt; returns access_token&#10;POST http://127.0.0.1:8000/api/auth/verify-otp&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;email&quot;: &quot;admin@example.com&quot;,&#10;  &quot;otp&quot;: &quot;000000&quot;  # replace with the real code&#10;}&#10;&#10;### Set token variable (paste the access_token value from previous response)&#10;@token = PASTE_TOKEN_HERE&#10;&#10;### Create product (admin) with Authorization header&#10;POST http://127.0.0.1:8000/api/products/admin&#10;Authorization: Bearer {{token}}&#10;Content-Type: multipart/form-data; boundary=---------------------------9051914041544843365972754266&#10;&#10;-----------------------------9051914041544843365972754266&#10;Content-Disposition: form-data; name=&quot;name&quot;&#10;&#10;Test Product&#10;-----------------------------9051914041544843365972754266&#10;Content-Disposition: form-data; name=&quot;description&quot;&#10;&#10;Test description&#10;-----------------------------9051914041544843365972754266&#10;Content-Disposition: form-data; name=&quot;price&quot;&#10;&#10;99.99&#10;-----------------------------9051914041544843365972754266&#10;Content-Disposition: form-data; name=&quot;category&quot;&#10;&#10;Electronics&#10;-----------------------------9051914041544843365972754266&#10;Content-Disposition: form-data; name=&quot;stock&quot;&#10;&#10;5&#10;-----------------------------9051914041544843365972754266&#10;Content-Disposition: form-data; name=&quot;mainImage&quot;; filename=&quot;image1.jpg&quot;&#10;Content-Type: image/jpeg&#10;&#10;&lt; ./media/sample.jpg&#10;-----------------------------9051914041544843365972754266&#10;Content-Disposition: form-data; name=&quot;images&quot;; filename=&quot;image2.jpg&quot;&#10;Content-Type: image/jpeg&#10;&#10;&lt; ./media/sample2.jpg&#10;-----------------------------9051914041544843365972754266--&#10;" />
              <option name="updatedContent" value="# Test your FastAPI endpoints&#10;&#10;GET http://127.0.0.1:8000/&#10;Accept: application/json&#10;&#10;###&#10;&#10;GET http://127.0.0.1:8000/hello/User&#10;Accept: application/json&#10;&#10;###&#10;&#10;# Auth flow&#10;&#10;### Register&#10;POST http://127.0.0.1:8000/api/auth/register&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;firstName&quot;: &quot;Admin&quot;,&#10;  &quot;lastName&quot;: &quot;User&quot;,&#10;  &quot;email&quot;: &quot;admin@example.com&quot;,&#10;  &quot;phone&quot;: &quot;0123456789&quot;,&#10;  &quot;password&quot;: &quot;secret&quot;&#10;}&#10;&#10;### Send OTP (check your email for the code)&#10;POST http://127.0.0.1:8000/api/auth/send-otp&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;email&quot;: &quot;admin@example.com&quot;&#10;}&#10;&#10;### Verify OTP -&gt; returns access_token&#10;POST http://127.0.0.1:8000/api/auth/verify-otp&#10;Content-Type: application/json&#10;&#10;{&#10;  &quot;email&quot;: &quot;admin@example.com&quot;,&#10;  &quot;otp&quot;: &quot;000000&quot;  # replace with the real code&#10;}&#10;&#10;### Set token variable (paste the access_token value from previous response)&#10;@token = PASTE_TOKEN_HERE&#10;&#10;### Create product (admin) with Authorization header&#10;POST http://127.0.0.1:8000/api/products/admin&#10;Authorization: Bearer {{token}}&#10;Content-Type: multipart/form-data; boundary=---------------------------9051914041544843365972754266&#10;&#10;-----------------------------9051914041544843365972754266&#10;Content-Disposition: form-data; name=&quot;name&quot;&#10;&#10;Test Product&#10;-----------------------------9051914041544843365972754266&#10;Content-Disposition: form-data; name=&quot;description&quot;&#10;&#10;Test description&#10;-----------------------------9051914041544843365972754266&#10;Content-Disposition: form-data; name=&quot;price&quot;&#10;&#10;99.99&#10;-----------------------------9051914041544843365972754266&#10;Content-Disposition: form-data; name=&quot;category&quot;&#10;&#10;Electronics&#10;-----------------------------9051914041544843365972754266&#10;Content-Disposition: form-data; name=&quot;stock&quot;&#10;&#10;5&#10;-----------------------------9051914041544843365972754266&#10;Content-Disposition: form-data; name=&quot;mainImage&quot;; filename=&quot;image1.jpg&quot;&#10;Content-Type: image/jpeg&#10;&#10;&lt; ./media/sample.jpg&#10;-----------------------------9051914041544843365972754266&#10;Content-Disposition: form-data; name=&quot;images&quot;; filename=&quot;image2.jpg&quot;&#10;Content-Type: image/jpeg&#10;&#10;&lt; ./media/sample2.jpg&#10;-----------------------------9051914041544843365972754266--&#10;&#10;### Validate token (requires Authorization header)&#10;POST http://127.0.0.1:8000/api/auth/validate-token&#10;Authorization: Bearer {{token}}&#10;&#10;###" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>